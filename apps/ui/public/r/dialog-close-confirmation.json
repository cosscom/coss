{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog-close-confirmation",
  "type": "registry:example",
  "description": "Prompt before closing with unsaved changes",
  "registryDependencies": [
    "@coss/alert-dialog",
    "@coss/dialog",
    "@coss/button",
    "@coss/form",
    "@coss/field",
    "@coss/textarea"
  ],
  "files": [
    {
      "path": "registry/default/examples/dialog-close-confirmation.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  AlertDialog,\n  AlertDialogClose,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogPopup,\n  AlertDialogTitle,\n} from \"@/registry/default/ui/alert-dialog\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogPopup,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/registry/default/ui/dialog\"\nimport { Field } from \"@/registry/default/ui/field\"\nimport { Form } from \"@/registry/default/ui/form\"\nimport { Textarea } from \"@/registry/default/ui/textarea\"\n\nexport default function DialogCloseConfirmationDemo() {\n  const [dialogOpen, setDialogOpen] = React.useState(false)\n  const [confirmOpen, setConfirmOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <Dialog\n      open={dialogOpen}\n      onOpenChange={(o) => {\n        if (!o && value) {\n          setConfirmOpen(true)\n        } else {\n          setDialogOpen(o)\n        }\n      }}\n    >\n      <DialogTrigger render={<Button variant=\"outline\" />}>\n        Compose\n      </DialogTrigger>\n      <DialogPopup showCloseButton={false}>\n        <DialogHeader>\n          <DialogTitle>New message</DialogTitle>\n          <DialogDescription>Type something and try closing.</DialogDescription>\n        </DialogHeader>\n        <Form\n          onSubmit={(event) => {\n            event.preventDefault()\n            // Close the dialog when submitting\n            setDialogOpen(false)\n          }}\n        >\n          <Field>\n            <Textarea\n              value={value}\n              onChange={(e) => setValue(e.target.value)}\n            />\n          </Field>\n          <DialogFooter>\n            <DialogClose render={<Button variant=\"ghost\" />}>\n              Cancel\n            </DialogClose>\n            <Button\n              onClick={() => {\n                setValue(\"\")\n                setDialogOpen(false)\n              }}\n            >\n              Send\n            </Button>\n          </DialogFooter>\n        </Form>\n      </DialogPopup>\n\n      {/* Confirmation dialog */}\n      <AlertDialog open={confirmOpen} onOpenChange={setConfirmOpen}>\n        <AlertDialogPopup>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Discard changes?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Your message will be lost.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogClose render={<Button variant=\"ghost\" />}>\n              Go back\n            </AlertDialogClose>\n            <Button\n              onClick={() => {\n                setConfirmOpen(false)\n                setValue(\"\")\n                setDialogOpen(false)\n              }}\n            >\n              Discard\n            </Button>\n          </AlertDialogFooter>\n        </AlertDialogPopup>\n      </AlertDialog>\n    </Dialog>\n  )\n}\n",
      "type": "registry:example"
    }
  ],
  "categories": [
    "dialog",
    "alert dialog",
    "form",
    "field",
    "button",
    "textarea"
  ]
}