{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-zod",
  "type": "registry:example",
  "description": "Form with zod validation",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "@coss/form",
    "@coss/field",
    "@coss/button"
  ],
  "files": [
    {
      "path": "registry/default/examples/form-zod.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Field,\n  FieldControl,\n  FieldError,\n  FieldLabel,\n} from \"@/registry/default/ui/field\"\nimport { Form } from \"@/registry/default/ui/form\"\n\nconst schema = z.object({\n  name: z.string().min(1, { message: \"Please enter a name.\" }),\n  age: z.coerce\n    .number({ message: \"Please enter a number.\" })\n    .positive({ message: \"Number must be positive.\" }),\n})\n\ntype Errors = Record<string, string | string[]>\n\nasync function submitForm(event: React.FormEvent<HTMLFormElement>) {\n  event.preventDefault()\n\n  const formData = new FormData(event.currentTarget)\n  const result = schema.safeParse(Object.fromEntries(formData as any))\n\n  if (!result.success) {\n    const { fieldErrors } = z.flattenError(result.error)\n    return { errors: fieldErrors as Errors }\n  }\n\n  return {\n    errors: {} as Errors,\n  }\n}\n\nexport default function FormZodDemo() {\n  const [loading, setLoading] = React.useState(false)\n  const [errors, setErrors] = React.useState<Errors>({})\n  const handleClearErrors = (next: Errors) => setErrors(next)\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    const formEl = event.currentTarget\n    setLoading(true)\n    const response = await submitForm(event)\n    await new Promise((r) => setTimeout(r, 800))\n    setErrors(response.errors)\n    setLoading(false)\n    if (Object.keys(response.errors).length === 0) {\n      const formData = new FormData(formEl)\n      alert(\n        `Name: ${String(formData.get(\"name\") || \"\")}\\nAge: ${String(\n          formData.get(\"age\") || \"\"\n        )}`\n      )\n    }\n  }\n\n  return (\n    <Form\n      className=\"max-w-64\"\n      errors={errors}\n      onClearErrors={handleClearErrors}\n      onSubmit={onSubmit}\n    >\n      <Field name=\"name\">\n        <FieldLabel>Name</FieldLabel>\n        <FieldControl placeholder=\"Enter name\" disabled={loading} />\n        <FieldError />\n      </Field>\n      <Field name=\"age\">\n        <FieldLabel>Age</FieldLabel>\n        <FieldControl placeholder=\"Enter age\" disabled={loading} />\n        <FieldError />\n      </Field>\n      <Button type=\"submit\" disabled={loading}>\n        Submit\n      </Button>\n    </Form>\n  )\n}\n",
      "type": "registry:example"
    }
  ],
  "categories": [
    "form",
    "field",
    "button",
    "validation",
    "label",
    "zod"
  ]
}