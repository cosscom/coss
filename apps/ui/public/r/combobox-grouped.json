{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox-grouped",
  "type": "registry:example",
  "description": "Combobox with grouped items",
  "registryDependencies": [
    "@coss/combobox"
  ],
  "files": [
    {
      "path": "registry/default/examples/combobox-grouped.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport {\n  Combobox,\n  ComboboxCollection,\n  ComboboxEmpty,\n  ComboboxGroup,\n  ComboboxGroupLabel,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxList,\n  ComboboxPopup,\n  ComboboxSeparator,\n} from \"@/registry/default/ui/combobox\"\n\n// Grouped items demo\ntype Tag = { id: string; label: string; group: \"Status\" | \"Priority\" | \"Team\" }\ntype TagGroup = { value: string; items: Tag[] }\n\nconst tagsData: Tag[] = [\n  // Status\n  { id: \"s-open\", label: \"Open\", group: \"Status\" },\n  { id: \"s-in-progress\", label: \"In progress\", group: \"Status\" },\n  { id: \"s-blocked\", label: \"Blocked\", group: \"Status\" },\n  { id: \"s-resolved\", label: \"Resolved\", group: \"Status\" },\n  { id: \"s-closed\", label: \"Closed\", group: \"Status\" },\n  // Priority\n  { id: \"p-low\", label: \"Low\", group: \"Priority\" },\n  { id: \"p-medium\", label: \"Medium\", group: \"Priority\" },\n  { id: \"p-high\", label: \"High\", group: \"Priority\" },\n  { id: \"p-urgent\", label: \"Urgent\", group: \"Priority\" },\n  // Team\n  { id: \"t-design\", label: \"Design\", group: \"Team\" },\n  { id: \"t-frontend\", label: \"Frontend\", group: \"Team\" },\n  { id: \"t-backend\", label: \"Backend\", group: \"Team\" },\n  { id: \"t-devops\", label: \"DevOps\", group: \"Team\" },\n  { id: \"t-qa\", label: \"QA\", group: \"Team\" },\n  { id: \"t-mobile\", label: \"Mobile\", group: \"Team\" },\n  { id: \"t-data\", label: \"Data\", group: \"Team\" },\n  { id: \"t-security\", label: \"Security\", group: \"Team\" },\n  { id: \"t-platform\", label: \"Platform\", group: \"Team\" },\n  { id: \"t-infra\", label: \"Infrastructure\", group: \"Team\" },\n  { id: \"t-product\", label: \"Product\", group: \"Team\" },\n  { id: \"t-marketing\", label: \"Marketing\", group: \"Team\" },\n  { id: \"t-sales\", label: \"Sales\", group: \"Team\" },\n  { id: \"t-support\", label: \"Support\", group: \"Team\" },\n  { id: \"t-research\", label: \"Research\", group: \"Team\" },\n  { id: \"t-content\", label: \"Content\", group: \"Team\" },\n  { id: \"t-analytics\", label: \"Analytics\", group: \"Team\" },\n  { id: \"t-operations\", label: \"Operations\", group: \"Team\" },\n  { id: \"t-finance\", label: \"Finance\", group: \"Team\" },\n  { id: \"t-hr\", label: \"HR\", group: \"Team\" },\n  { id: \"t-legal\", label: \"Legal\", group: \"Team\" },\n  { id: \"t-growth\", label: \"Growth\", group: \"Team\" },\n  { id: \"t-partner\", label: \"Partner\", group: \"Team\" },\n  { id: \"t-community\", label: \"Community\", group: \"Team\" },\n  { id: \"t-docs\", label: \"Docs\", group: \"Team\" },\n  { id: \"t-l10n\", label: \"Localization\", group: \"Team\" },\n  { id: \"t-a11y\", label: \"Accessibility\", group: \"Team\" },\n  { id: \"t-sre\", label: \"SRE\", group: \"Team\" },\n  { id: \"t-release\", label: \"Release\", group: \"Team\" },\n  { id: \"t-architecture\", label: \"Architecture\", group: \"Team\" },\n  { id: \"t-ux\", label: \"UX\", group: \"Team\" },\n  { id: \"t-ui\", label: \"UI\", group: \"Team\" },\n  { id: \"t-management\", label: \"Management\", group: \"Team\" },\n]\n\nfunction groupTags(tags: Tag[]): TagGroup[] {\n  const groups: Record<string, Tag[]> = {}\n  for (const t of tags) {\n    ;(groups[t.group] ??= []).push(t)\n  }\n  const order: Array<TagGroup[\"value\"]> = [\"Status\", \"Priority\", \"Team\"]\n  return order.map((value) => ({ value, items: groups[value] ?? [] }))\n}\n\nconst groupedTags: TagGroup[] = groupTags(tagsData)\n\nexport default function ComboboxGrouped() {\n  return (\n    <Combobox items={groupedTags}>\n      <div className=\"flex flex-col items-start gap-2\">\n        <ComboboxInput placeholder=\"e.g. feature\" aria-label=\"Search tags\" />\n      </div>\n      <ComboboxPopup>\n        <ComboboxEmpty>No tags found.</ComboboxEmpty>\n        <ComboboxList>\n          {(group: TagGroup) => (\n            <React.Fragment key={group.value}>\n              <ComboboxGroup items={group.items}>\n                <ComboboxGroupLabel>{group.value}</ComboboxGroupLabel>\n                <ComboboxCollection>\n                  {(tag: Tag) => (\n                    <ComboboxItem key={tag.id} value={tag}>\n                      {tag.label}\n                    </ComboboxItem>\n                  )}\n                </ComboboxCollection>\n              </ComboboxGroup>\n              {group.value !== \"Team\" && <ComboboxSeparator />}\n            </React.Fragment>\n          )}\n        </ComboboxList>\n      </ComboboxPopup>\n    </Combobox>\n  )\n}\n",
      "type": "registry:example"
    }
  ],
  "categories": [
    "combobox",
    "input"
  ]
}