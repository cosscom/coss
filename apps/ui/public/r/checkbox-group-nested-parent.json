{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-group-nested-parent",
  "type": "registry:example",
  "description": "Checkbox group parent with nested children controls",
  "registryDependencies": [
    "@coss/checkbox-group",
    "@coss/checkbox",
    "@coss/label"
  ],
  "files": [
    {
      "path": "registry/default/examples/checkbox-group-nested-parent.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Checkbox } from \"@/registry/default/ui/checkbox\"\nimport { CheckboxGroup } from \"@/registry/default/ui/checkbox-group\"\nimport { Label } from \"@/registry/default/ui/label\"\n\nconst mainPermissions = [\n  { id: \"view-dashboard\", name: \"View Dashboard\" },\n  { id: \"manage-users\", name: \"Manage Users\" },\n  { id: \"access-reports\", name: \"Access Reports\" },\n]\n\nconst userManagementPermissions = [\n  { id: \"create-user\", name: \"Create User\" },\n  { id: \"edit-user\", name: \"Edit User\" },\n  { id: \"delete-user\", name: \"Delete User\" },\n  { id: \"assign-roles\", name: \"Assign Roles\" },\n]\n\nexport default function CheckboxGroupNestedParentDemo() {\n  const [mainValue, setMainValue] = React.useState<string[]>([])\n  const [managementValue, setManagementValue] = React.useState<string[]>([])\n\n  const managementIsPartial =\n    managementValue.length > 0 &&\n    managementValue.length !== userManagementPermissions.length\n\n  return (\n    <CheckboxGroup\n      aria-labelledby=\"user-permissions-caption\"\n      value={mainValue}\n      onValueChange={(value) => {\n        if (value.includes(\"manage-users\")) {\n          setManagementValue(userManagementPermissions.map((p) => p.id))\n        } else if (\n          managementValue.length === userManagementPermissions.length\n        ) {\n          setManagementValue([])\n        }\n        setMainValue(value)\n      }}\n      allValues={mainPermissions.map((p) => p.id)}\n    >\n      <Label id=\"user-permissions-caption\">\n        <Checkbox parent indeterminate={managementIsPartial} />\n        User Permissions\n      </Label>\n\n      {mainPermissions\n        .filter((p) => p.id !== \"manage-users\")\n        .map((p) => (\n          <Label key={p.id} className=\"ms-4\">\n            <Checkbox value={p.id} />\n            {p.name}\n          </Label>\n        ))}\n\n      <CheckboxGroup\n        aria-labelledby=\"manage-users-caption\"\n        value={managementValue}\n        onValueChange={(value) => {\n          if (value.length === userManagementPermissions.length) {\n            setMainValue((prev) =>\n              Array.from(new Set([...prev, \"manage-users\"]))\n            )\n          } else {\n            setMainValue((prev) => prev.filter((v) => v !== \"manage-users\"))\n          }\n          setManagementValue(value)\n        }}\n        allValues={userManagementPermissions.map((p) => p.id)}\n        className=\"ms-4\"\n      >\n        <Label id=\"manage-users-caption\">\n          <Checkbox parent />\n          Manage Users\n        </Label>\n\n        {userManagementPermissions.map((p) => (\n          <Label key={p.id} className=\"ms-4\">\n            <Checkbox value={p.id} />\n            {p.name}\n          </Label>\n        ))}\n      </CheckboxGroup>\n    </CheckboxGroup>\n  )\n}\n",
      "type": "registry:example"
    }
  ],
  "categories": [
    "checkbox group",
    "checkbox",
    "label"
  ]
}